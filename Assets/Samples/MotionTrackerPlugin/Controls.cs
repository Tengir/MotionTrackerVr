//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Samples/MotionTrackerPlugin/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""7741591a-e010-48c2-a42b-ba93cd55de50"",
            ""actions"": [
                {
                    ""name"": ""RecordRightGesture"",
                    ""type"": ""Button"",
                    ""id"": ""574d34c3-5fff-4144-b70b-d4f9bca04c4d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecordLeftGesture"",
                    ""type"": ""Button"",
                    ""id"": ""62d756d3-4327-4ccb-a618-27dccd720500"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveRightGesture"",
                    ""type"": ""Button"",
                    ""id"": ""dfcac241-beea-4457-85ad-7056ed57f396"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""eef779ed-12c7-4dbb-bb0f-6bc9ef5bebf2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf61eac6-ca44-4e58-8cf5-d4267ac5df56"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";XRControllers"",
                    ""action"": ""RecordRightGesture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4acd1bbe-7f0f-4f87-8954-2838ec5ab875"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";XRControllers"",
                    ""action"": ""RecordLeftGesture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69c3ba74-1ef0-4f55-baf3-a57e11d1ef7c"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""533a0d9b-e438-4aec-abc9-6e81b328049e"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";XRControllers"",
                    ""action"": ""SaveRightGesture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XRControllers"",
            ""bindingGroup"": ""XRControllers"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_RecordRightGesture = m_Main.FindAction("RecordRightGesture", throwIfNotFound: true);
        m_Main_RecordLeftGesture = m_Main.FindAction("RecordLeftGesture", throwIfNotFound: true);
        m_Main_SaveRightGesture = m_Main.FindAction("SaveRightGesture", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Main.enabled, "This will cause a leak and performance issues, Controls.Main.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_RecordRightGesture;
    private readonly InputAction m_Main_RecordLeftGesture;
    private readonly InputAction m_Main_SaveRightGesture;
    private readonly InputAction m_Main_Move;
    public struct MainActions
    {
        private @Controls m_Wrapper;
        public MainActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RecordRightGesture => m_Wrapper.m_Main_RecordRightGesture;
        public InputAction @RecordLeftGesture => m_Wrapper.m_Main_RecordLeftGesture;
        public InputAction @SaveRightGesture => m_Wrapper.m_Main_SaveRightGesture;
        public InputAction @Move => m_Wrapper.m_Main_Move;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @RecordRightGesture.started += instance.OnRecordRightGesture;
            @RecordRightGesture.performed += instance.OnRecordRightGesture;
            @RecordRightGesture.canceled += instance.OnRecordRightGesture;
            @RecordLeftGesture.started += instance.OnRecordLeftGesture;
            @RecordLeftGesture.performed += instance.OnRecordLeftGesture;
            @RecordLeftGesture.canceled += instance.OnRecordLeftGesture;
            @SaveRightGesture.started += instance.OnSaveRightGesture;
            @SaveRightGesture.performed += instance.OnSaveRightGesture;
            @SaveRightGesture.canceled += instance.OnSaveRightGesture;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @RecordRightGesture.started -= instance.OnRecordRightGesture;
            @RecordRightGesture.performed -= instance.OnRecordRightGesture;
            @RecordRightGesture.canceled -= instance.OnRecordRightGesture;
            @RecordLeftGesture.started -= instance.OnRecordLeftGesture;
            @RecordLeftGesture.performed -= instance.OnRecordLeftGesture;
            @RecordLeftGesture.canceled -= instance.OnRecordLeftGesture;
            @SaveRightGesture.started -= instance.OnSaveRightGesture;
            @SaveRightGesture.performed -= instance.OnSaveRightGesture;
            @SaveRightGesture.canceled -= instance.OnSaveRightGesture;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_XRControllersSchemeIndex = -1;
    public InputControlScheme XRControllersScheme
    {
        get
        {
            if (m_XRControllersSchemeIndex == -1) m_XRControllersSchemeIndex = asset.FindControlSchemeIndex("XRControllers");
            return asset.controlSchemes[m_XRControllersSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnRecordRightGesture(InputAction.CallbackContext context);
        void OnRecordLeftGesture(InputAction.CallbackContext context);
        void OnSaveRightGesture(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
